<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Мессенджер</title>
    <link rel="stylesheet" href="/style.css" />
  </head>
  <body>
    <div class="messenger-container">
      <div class="sidebar">
        <div class="sidebar-header">
          <h2>Чаты</h2>
        </div>
        <div class="chat-list">
          <div class="chat-group">
            <h3>Открытые</h3>
            <% openChats.forEach(chat => { %>
            <a
              href="/messenger/chat/<%= chat.user_id %>"
              class="chat-item <% if(currentChatUser && currentChatUser.id === chat.user_id) { %>active<% } %>"
            >
              <div class="chat-info">
                <div class="chat-name"><%= chat.user_first_name %></div>
                <div class="last-message"><%= chat.last_message %></div>
              </div>
              <div class="chat-meta">
                <% if (chat.last_message_time) { %>
                <div class="last-message-time">
                  <%= new
                  Date(chat.last_message_time).toLocaleTimeString('ru-RU', {
                  hour: '2-digit', minute: '2-digit' }) %>
                </div>
                <% } %> <% if (chat.last_sender_type === 'user') { %>
                <div class="unread-indicator"></div>
                <% } %>
              </div>
            </a>
            <% }); %>
          </div>
          <div class="chat-group">
            <h3>Завершенные</h3>
            <% closedChats.forEach(chat => { %>
            <a
              href="/messenger/chat/<%= chat.user_id %>"
              class="chat-item <% if(currentChatUser && currentChatUser.id === chat.user_id) { %>active<% } %>"
            >
              <div class="chat-info">
                <div class="chat-name"><%= chat.user_first_name %></div>
                <div class="last-message"><%= chat.last_message %></div>
              </div>
              <div class="chat-meta">
                <% if (chat.last_message_time) { %>
                <div class="last-message-time">
                  <%= new
                  Date(chat.last_message_time).toLocaleTimeString('ru-RU', {
                  hour: '2-digit', minute: '2-digit' }) %>
                </div>
                <% } %>
              </div>
            </a>
            <% }); %>
          </div>
        </div>
      </div>
      <div class="chat-window">
        <% if (currentChatUser) { %>
        <div class="chat-header">
          <h3><%= currentChatUser.first_name %></h3>
          <% if (ticketIsOpen) { %>
          <form
            action="/messenger/chat/<%= currentChatUser.id %>/close"
            method="post"
          >
            <button type="submit" class="close-ticket-btn">
              Закрыть тикет
            </button>
          </form>
          <% } %>
        </div>
        <div class="message-list">
          <% let lastTicketId = null; %> <% messages.forEach(message => { %> <%
          if (message.ticket_id !== lastTicketId) { %>
          <div class="ticket-separator">
            <span>Тикет #<%= message.ticket_id %></span>
          </div>
          <% } %>
          <div
            class="message <%= message.sender_type === 'manager' ? 'sent' : 'received' %>"
          >
            <div class="message-bubble">
              <div class="message-content">
                <% if (message.attachment_url) { %> <% if
                (message.attachment_type === 'photo') { %>
                <img
                  src="<%= message.attachment_url %>"
                  alt="Attachment"
                  class="message-attachment-image"
                />
                <% } else if (message.attachment_type === 'video') { %>
                <video
                  src="<%= message.attachment_url %>"
                  controls
                  class="message-attachment-video"
                ></video>
                <% } %> <% } %> <% if (message.message) { %>
                <p><%= message.message %></p>
                <% } %>
              </div>
            </div>
            <div class="message-timestamp">
              <%= new Date(message.created_at).toLocaleTimeString('ru-RU', {
              hour: '2-digit', minute: '2-digit'}) %>
            </div>
          </div>
          <% lastTicketId = message.ticket_id; %> <% }); %>
        </div>
        <div class="message-input-area">
          <div id="attachment-preview-container"></div>
          <div class="message-input">
            <form id="message-form" enctype="multipart/form-data">
              <input
                type="file"
                id="attachment-input"
                name="attachment"
                style="display: none"
                multiple
              />
              <label for="attachment-input" class="attachment-btn">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path
                    d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"
                  ></path>
                </svg>
              </label>
              <input
                type="text"
                id="message-input-field"
                name="message"
                placeholder="Введите сообщение..."
                autocomplete="off"
              />
              <button type="submit">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                >
                  <path
                    d="M3.478 2.405a.75.75 0 00-.926.94l2.432 7.905H13.5a.75.75 0 010 1.5H4.984l-2.432 7.905a.75.75 0 00.926.94 60.519 60.519 0 0018.445-8.986.75.75 0 000-1.218A60.517 60.517 0 003.478 2.405z"
                  />
                </svg>
              </button>
            </form>
          </div>
        </div>
        <% } else { %>
        <div class="no-chat-selected">
          <p>Выберите чат, чтобы начать общение</p>
        </div>
        <% } %>
      </div>
    </div>

    <% if (currentChatUser) { %>
    <script>
      const messageList = document.querySelector(".message-list");
      const messageForm = document.querySelector("#message-form");
      const messageInputField = document.querySelector("#message-input-field");
      const userId = "<%= currentChatUser.id %>";

      // Scroll to bottom on initial load
      messageList.scrollTop = messageList.scrollHeight;

      const wsProtocol = window.location.protocol === "https:" ? "wss" : "ws";
      const ws = new WebSocket(`${wsProtocol}://${window.location.host}`);

      ws.onopen = () => {
        console.log("WebSocket connection established");
      };

      ws.onmessage = (event) => {
        const data = JSON.parse(event.data);

        if (
          data.type === "newMessage" &&
          data.payload.userId.toString() === userId
        ) {
          appendMessage(data.payload);
        }

        if (
          data.type === "ticketClosed" &&
          data.payload.userId.toString() === userId
        ) {
          const closeButtonForm = document.querySelector(".chat-header form");
          if (closeButtonForm) {
            closeButtonForm.remove();
          }
          const chatItem = document.querySelector(
            `.chat-item[href*="/messenger/chat/${userId}"]`
          );
          if (chatItem) {
            chatItem.classList.add("chat-item--closed");
            const lastMessageElement = chatItem.querySelector(".last-message");
            if (lastMessageElement) {
              lastMessageElement.textContent = "Клиент завершил диалог";
            }
          }

          // Add system message to chat window
          const systemMessageDiv = document.createElement("div");
          systemMessageDiv.className = "ticket-separator";
          const systemMessageSpan = document.createElement("span");
          systemMessageSpan.textContent = "Клиент завершил диалог";
          systemMessageDiv.appendChild(systemMessageSpan);
          messageList.appendChild(systemMessageDiv);
          messageList.scrollTop = messageList.scrollHeight;
        }

        if (data.type === "error") {
          alert(data.payload.message);
        }
      };

      const attachmentInput = document.getElementById("attachment-input");
      const attachmentPreviewContainer = document.getElementById(
        "attachment-preview-container"
      );
      const sendButton = messageForm.querySelector("button[type='submit']");
      const sendButtonIcon = sendButton.innerHTML;

      let attachedFiles = [];

      function updateFileList() {
        attachmentPreviewContainer.innerHTML = "";
        if (attachedFiles.length > 0) {
          attachedFiles.forEach((file, index) => {
            const fileElement = document.createElement("div");
            fileElement.classList.add("file-preview-item");
            const fileName = document.createElement("span");
            fileName.textContent = file.name;
            const removeBtn = document.createElement("button");
            removeBtn.classList.add("remove-file-btn");
            removeBtn.innerHTML = "&times;";
            removeBtn.type = "button";
            removeBtn.onclick = () => {
              attachedFiles.splice(index, 1);
              updateFileList();
            };
            fileElement.appendChild(fileName);
            fileElement.appendChild(removeBtn);
            attachmentPreviewContainer.appendChild(fileElement);
          });
        }
      }

      attachmentInput.addEventListener("change", () => {
        attachedFiles.push(...Array.from(attachmentInput.files));
        updateFileList();
        attachmentInput.value = ""; // Clear the input
      });

      messageInputField.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          messageForm.requestSubmit();
        }
      });

      messageForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        const messageText = messageInputField.value.trim();
        if (!messageText && attachedFiles.length === 0) {
          return;
        }

        // --- Optimistic UI Update ---
        const tempId = `temp_${Date.now()}`;
        appendMessage({
          message: messageText,
          files: attachedFiles, // Pass the full File objects for preview
          sender_type: "manager",
          created_at: new Date().toISOString(),
          isLoading: true,
          tempId: tempId,
        });

        const filesForUpload = [...attachedFiles];

        // Clear inputs immediately
        messageInputField.value = "";
        attachedFiles = [];
        updateFileList();

        // --- Actual Form Submission ---
        const formData = new FormData();
        formData.append("userId", userId);
        formData.append("message", messageText);
        formData.append("tempId", tempId);
        filesForUpload.forEach((file) => {
          formData.append("attachment", file);
        });

        try {
          // No need to process the response here for optimistic UI
          await fetch("/api/message", {
            method: "POST",
            body: formData,
          });
          // The server will broadcast the message back via WebSocket
        } catch (error) {
          console.error("Ошибка при отправке сообщения:", error);
          alert("Произошла ошибка сети. Попробуйте еще раз.");
          const tempMessage = document.getElementById(tempId);
          if (tempMessage) tempMessage.style.opacity = "0.5";
        }
      });

      function appendMessage(payload) {
        // If it's a confirmation for an optimistic message, replace it
        if (payload.tempId && document.getElementById(payload.tempId)) {
          const tempMessage = document.getElementById(payload.tempId);
          const newContent = createMessageElement(payload);
          tempMessage.replaceWith(newContent);
          messageList.scrollTop = messageList.scrollHeight;
          return;
        }

        // If it's a new message from another user/manager, just append it
        const messageElement = createMessageElement(payload);
        messageList.appendChild(messageElement);
        messageList.scrollTop = messageList.scrollHeight;
      }

      function createMessageElement(payload) {
        const {
          message,
          files,
          attachmentUrl,
          attachmentType,
          sender_type,
          created_at,
          isLoading,
          tempId,
        } = payload;

        const messageWrapper = document.createElement("div");
        messageWrapper.classList.add(
          "message",
          sender_type === "manager" ? "sent" : "received"
        );
        if (tempId) {
          messageWrapper.id = tempId;
        }

        const bubbleDiv = document.createElement("div");
        bubbleDiv.classList.add("message-bubble");
        if (isLoading) {
          bubbleDiv.classList.add("is-loading");
        }

        const contentDiv = document.createElement("div");
        contentDiv.className = "message-content";

        // Attachment rendering
        if (attachmentUrl) {
          // Real attachment from server
          if (attachmentType === "photo") {
            const img = document.createElement("img");
            img.src = attachmentUrl;
            img.className = "message-attachment-image";
            contentDiv.appendChild(img);
          } else if (attachmentType === "video") {
            const video = document.createElement("video");
            video.src = attachmentUrl;
            video.controls = true;
            video.className = "message-attachment-video";
            contentDiv.appendChild(video);
          }
        } else if (files && files.length > 0) {
          // Optimistic file preview
          files.forEach((file) => {
            const contentWrapper = document.createElement("div");
            contentWrapper.style.position = "relative";

            if (file.type && file.type.startsWith("image/")) {
              const img = document.createElement("img");
              img.src = URL.createObjectURL(file);
              img.className = "message-attachment-image";
              img.onload = () => URL.revokeObjectURL(img.src); // Free memory once loaded
              contentWrapper.appendChild(img);
            } else {
              const p = document.createElement("p");
              p.textContent = `[${file.name}]`;
              contentWrapper.appendChild(p);
            }
            contentDiv.appendChild(contentWrapper);
          });
        }

        // Text rendering
        if (message) {
          const p = document.createElement("p");
          p.textContent = message;
          contentDiv.appendChild(p);
        }

        bubbleDiv.appendChild(contentDiv);
        messageWrapper.appendChild(bubbleDiv);

        // Timestamp
        const timestampDiv = document.createElement("div");
        timestampDiv.className = "message-timestamp";
        timestampDiv.textContent = new Date(created_at).toLocaleTimeString(
          "ru-RU",
          { hour: "2-digit", minute: "2-digit" }
        );
        messageWrapper.appendChild(timestampDiv);

        // Loader rendering
        if (isLoading) {
          const loader = document.createElement("div");
          loader.className = "message-loader";
          bubbleDiv.appendChild(loader);
        }

        return messageWrapper;
      }
    </script>
    <% } %>
  </body>
</html>
